// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `waku_store.pb.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Index {
    // message fields
    pub digest: ::std::vec::Vec<u8>,
    pub receiver_time: i64,
    pub sender_time: i64,
    pub pubsub_topic: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Index {
    fn default() -> &'a Index {
        <Index as ::protobuf::Message>::default_instance()
    }
}

impl Index {
    pub fn new() -> Index {
        ::std::default::Default::default()
    }

    // bytes digest = 1;


    pub fn get_digest(&self) -> &[u8] {
        &self.digest
    }
    pub fn clear_digest(&mut self) {
        self.digest.clear();
    }

    // Param is passed by value, moved
    pub fn set_digest(&mut self, v: ::std::vec::Vec<u8>) {
        self.digest = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_digest(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.digest
    }

    // Take field
    pub fn take_digest(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.digest, ::std::vec::Vec::new())
    }

    // sint64 receiver_time = 2;


    pub fn get_receiver_time(&self) -> i64 {
        self.receiver_time
    }
    pub fn clear_receiver_time(&mut self) {
        self.receiver_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_receiver_time(&mut self, v: i64) {
        self.receiver_time = v;
    }

    // sint64 sender_time = 3;


    pub fn get_sender_time(&self) -> i64 {
        self.sender_time
    }
    pub fn clear_sender_time(&mut self) {
        self.sender_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_sender_time(&mut self, v: i64) {
        self.sender_time = v;
    }

    // string pubsub_topic = 4;


    pub fn get_pubsub_topic(&self) -> &str {
        &self.pubsub_topic
    }
    pub fn clear_pubsub_topic(&mut self) {
        self.pubsub_topic.clear();
    }

    // Param is passed by value, moved
    pub fn set_pubsub_topic(&mut self, v: ::std::string::String) {
        self.pubsub_topic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pubsub_topic(&mut self) -> &mut ::std::string::String {
        &mut self.pubsub_topic
    }

    // Take field
    pub fn take_pubsub_topic(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pubsub_topic, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Index {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.digest)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.receiver_time = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.sender_time = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pubsub_topic)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.digest.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.digest);
        }
        if self.receiver_time != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, self.receiver_time);
        }
        if self.sender_time != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(3, self.sender_time);
        }
        if !self.pubsub_topic.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.pubsub_topic);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.digest.is_empty() {
            os.write_bytes(1, &self.digest)?;
        }
        if self.receiver_time != 0 {
            os.write_sint64(2, self.receiver_time)?;
        }
        if self.sender_time != 0 {
            os.write_sint64(3, self.sender_time)?;
        }
        if !self.pubsub_topic.is_empty() {
            os.write_string(4, &self.pubsub_topic)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Index {
        Index::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "digest",
                |m: &Index| { &m.digest },
                |m: &mut Index| { &mut m.digest },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "receiver_time",
                |m: &Index| { &m.receiver_time },
                |m: &mut Index| { &mut m.receiver_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "sender_time",
                |m: &Index| { &m.sender_time },
                |m: &mut Index| { &mut m.sender_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pubsub_topic",
                |m: &Index| { &m.pubsub_topic },
                |m: &mut Index| { &mut m.pubsub_topic },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Index>(
                "Index",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Index {
        static instance: ::protobuf::rt::LazyV2<Index> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Index::new)
    }
}

impl ::protobuf::Clear for Index {
    fn clear(&mut self) {
        self.digest.clear();
        self.receiver_time = 0;
        self.sender_time = 0;
        self.pubsub_topic.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Index {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Index {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PagingInfo {
    // message fields
    pub page_size: u64,
    pub cursor: ::protobuf::SingularPtrField<Index>,
    pub direction: PagingInfo_Direction,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PagingInfo {
    fn default() -> &'a PagingInfo {
        <PagingInfo as ::protobuf::Message>::default_instance()
    }
}

impl PagingInfo {
    pub fn new() -> PagingInfo {
        ::std::default::Default::default()
    }

    // uint64 page_size = 1;


    pub fn get_page_size(&self) -> u64 {
        self.page_size
    }
    pub fn clear_page_size(&mut self) {
        self.page_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_page_size(&mut self, v: u64) {
        self.page_size = v;
    }

    // .pb.Index cursor = 2;


    pub fn get_cursor(&self) -> &Index {
        self.cursor.as_ref().unwrap_or_else(|| <Index as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cursor(&mut self) {
        self.cursor.clear();
    }

    pub fn has_cursor(&self) -> bool {
        self.cursor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cursor(&mut self, v: Index) {
        self.cursor = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cursor(&mut self) -> &mut Index {
        if self.cursor.is_none() {
            self.cursor.set_default();
        }
        self.cursor.as_mut().unwrap()
    }

    // Take field
    pub fn take_cursor(&mut self) -> Index {
        self.cursor.take().unwrap_or_else(|| Index::new())
    }

    // .pb.PagingInfo.Direction direction = 3;


    pub fn get_direction(&self) -> PagingInfo_Direction {
        self.direction
    }
    pub fn clear_direction(&mut self) {
        self.direction = PagingInfo_Direction::BACKWARD;
    }

    // Param is passed by value, moved
    pub fn set_direction(&mut self, v: PagingInfo_Direction) {
        self.direction = v;
    }
}

impl ::protobuf::Message for PagingInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.cursor {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.page_size = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cursor)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.direction, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.page_size != 0 {
            my_size += ::protobuf::rt::value_size(1, self.page_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.cursor.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.direction != PagingInfo_Direction::BACKWARD {
            my_size += ::protobuf::rt::enum_size(3, self.direction);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.page_size != 0 {
            os.write_uint64(1, self.page_size)?;
        }
        if let Some(ref v) = self.cursor.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.direction != PagingInfo_Direction::BACKWARD {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.direction))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PagingInfo {
        PagingInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "page_size",
                |m: &PagingInfo| { &m.page_size },
                |m: &mut PagingInfo| { &mut m.page_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Index>>(
                "cursor",
                |m: &PagingInfo| { &m.cursor },
                |m: &mut PagingInfo| { &mut m.cursor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PagingInfo_Direction>>(
                "direction",
                |m: &PagingInfo| { &m.direction },
                |m: &mut PagingInfo| { &mut m.direction },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PagingInfo>(
                "PagingInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PagingInfo {
        static instance: ::protobuf::rt::LazyV2<PagingInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PagingInfo::new)
    }
}

impl ::protobuf::Clear for PagingInfo {
    fn clear(&mut self) {
        self.page_size = 0;
        self.cursor.clear();
        self.direction = PagingInfo_Direction::BACKWARD;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PagingInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PagingInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PagingInfo_Direction {
    BACKWARD = 0,
    FORWARD = 1,
}

impl ::protobuf::ProtobufEnum for PagingInfo_Direction {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PagingInfo_Direction> {
        match value {
            0 => ::std::option::Option::Some(PagingInfo_Direction::BACKWARD),
            1 => ::std::option::Option::Some(PagingInfo_Direction::FORWARD),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PagingInfo_Direction] = &[
            PagingInfo_Direction::BACKWARD,
            PagingInfo_Direction::FORWARD,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<PagingInfo_Direction>("PagingInfo.Direction", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for PagingInfo_Direction {
}

impl ::std::default::Default for PagingInfo_Direction {
    fn default() -> Self {
        PagingInfo_Direction::BACKWARD
    }
}

impl ::protobuf::reflect::ProtobufValue for PagingInfo_Direction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ContentFilter {
    // message fields
    pub contentTopic: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ContentFilter {
    fn default() -> &'a ContentFilter {
        <ContentFilter as ::protobuf::Message>::default_instance()
    }
}

impl ContentFilter {
    pub fn new() -> ContentFilter {
        ::std::default::Default::default()
    }

    // string contentTopic = 1;


    pub fn get_contentTopic(&self) -> &str {
        &self.contentTopic
    }
    pub fn clear_contentTopic(&mut self) {
        self.contentTopic.clear();
    }

    // Param is passed by value, moved
    pub fn set_contentTopic(&mut self, v: ::std::string::String) {
        self.contentTopic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contentTopic(&mut self) -> &mut ::std::string::String {
        &mut self.contentTopic
    }

    // Take field
    pub fn take_contentTopic(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contentTopic, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ContentFilter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contentTopic)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.contentTopic.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.contentTopic);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.contentTopic.is_empty() {
            os.write_string(1, &self.contentTopic)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContentFilter {
        ContentFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contentTopic",
                |m: &ContentFilter| { &m.contentTopic },
                |m: &mut ContentFilter| { &mut m.contentTopic },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ContentFilter>(
                "ContentFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ContentFilter {
        static instance: ::protobuf::rt::LazyV2<ContentFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ContentFilter::new)
    }
}

impl ::protobuf::Clear for ContentFilter {
    fn clear(&mut self) {
        self.contentTopic.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContentFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContentFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HistoryQuery {
    // message fields
    pub pubsub_topic: ::std::string::String,
    pub content_filters: ::protobuf::RepeatedField<ContentFilter>,
    pub paging_info: ::protobuf::SingularPtrField<PagingInfo>,
    pub start_time: i64,
    pub end_time: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HistoryQuery {
    fn default() -> &'a HistoryQuery {
        <HistoryQuery as ::protobuf::Message>::default_instance()
    }
}

impl HistoryQuery {
    pub fn new() -> HistoryQuery {
        ::std::default::Default::default()
    }

    // string pubsub_topic = 2;


    pub fn get_pubsub_topic(&self) -> &str {
        &self.pubsub_topic
    }
    pub fn clear_pubsub_topic(&mut self) {
        self.pubsub_topic.clear();
    }

    // Param is passed by value, moved
    pub fn set_pubsub_topic(&mut self, v: ::std::string::String) {
        self.pubsub_topic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pubsub_topic(&mut self) -> &mut ::std::string::String {
        &mut self.pubsub_topic
    }

    // Take field
    pub fn take_pubsub_topic(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pubsub_topic, ::std::string::String::new())
    }

    // repeated .pb.ContentFilter content_filters = 3;


    pub fn get_content_filters(&self) -> &[ContentFilter] {
        &self.content_filters
    }
    pub fn clear_content_filters(&mut self) {
        self.content_filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_content_filters(&mut self, v: ::protobuf::RepeatedField<ContentFilter>) {
        self.content_filters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_content_filters(&mut self) -> &mut ::protobuf::RepeatedField<ContentFilter> {
        &mut self.content_filters
    }

    // Take field
    pub fn take_content_filters(&mut self) -> ::protobuf::RepeatedField<ContentFilter> {
        ::std::mem::replace(&mut self.content_filters, ::protobuf::RepeatedField::new())
    }

    // .pb.PagingInfo paging_info = 4;


    pub fn get_paging_info(&self) -> &PagingInfo {
        self.paging_info.as_ref().unwrap_or_else(|| <PagingInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_paging_info(&mut self) {
        self.paging_info.clear();
    }

    pub fn has_paging_info(&self) -> bool {
        self.paging_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_paging_info(&mut self, v: PagingInfo) {
        self.paging_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_paging_info(&mut self) -> &mut PagingInfo {
        if self.paging_info.is_none() {
            self.paging_info.set_default();
        }
        self.paging_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_paging_info(&mut self) -> PagingInfo {
        self.paging_info.take().unwrap_or_else(|| PagingInfo::new())
    }

    // sint64 start_time = 5;


    pub fn get_start_time(&self) -> i64 {
        self.start_time
    }
    pub fn clear_start_time(&mut self) {
        self.start_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: i64) {
        self.start_time = v;
    }

    // sint64 end_time = 6;


    pub fn get_end_time(&self) -> i64 {
        self.end_time
    }
    pub fn clear_end_time(&mut self) {
        self.end_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_end_time(&mut self, v: i64) {
        self.end_time = v;
    }
}

impl ::protobuf::Message for HistoryQuery {
    fn is_initialized(&self) -> bool {
        for v in &self.content_filters {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.paging_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pubsub_topic)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.content_filters)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.paging_info)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.start_time = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.end_time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.pubsub_topic.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pubsub_topic);
        }
        for value in &self.content_filters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.paging_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.start_time != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(5, self.start_time);
        }
        if self.end_time != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(6, self.end_time);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.pubsub_topic.is_empty() {
            os.write_string(2, &self.pubsub_topic)?;
        }
        for v in &self.content_filters {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.paging_info.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.start_time != 0 {
            os.write_sint64(5, self.start_time)?;
        }
        if self.end_time != 0 {
            os.write_sint64(6, self.end_time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HistoryQuery {
        HistoryQuery::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pubsub_topic",
                |m: &HistoryQuery| { &m.pubsub_topic },
                |m: &mut HistoryQuery| { &mut m.pubsub_topic },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ContentFilter>>(
                "content_filters",
                |m: &HistoryQuery| { &m.content_filters },
                |m: &mut HistoryQuery| { &mut m.content_filters },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PagingInfo>>(
                "paging_info",
                |m: &HistoryQuery| { &m.paging_info },
                |m: &mut HistoryQuery| { &mut m.paging_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "start_time",
                |m: &HistoryQuery| { &m.start_time },
                |m: &mut HistoryQuery| { &mut m.start_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "end_time",
                |m: &HistoryQuery| { &m.end_time },
                |m: &mut HistoryQuery| { &mut m.end_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HistoryQuery>(
                "HistoryQuery",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HistoryQuery {
        static instance: ::protobuf::rt::LazyV2<HistoryQuery> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HistoryQuery::new)
    }
}

impl ::protobuf::Clear for HistoryQuery {
    fn clear(&mut self) {
        self.pubsub_topic.clear();
        self.content_filters.clear();
        self.paging_info.clear();
        self.start_time = 0;
        self.end_time = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HistoryQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HistoryQuery {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HistoryResponse {
    // message fields
    pub messages: ::protobuf::RepeatedField<super::waku_message_pb::WakuMessage>,
    pub paging_info: ::protobuf::SingularPtrField<PagingInfo>,
    pub error: HistoryResponse_Error,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HistoryResponse {
    fn default() -> &'a HistoryResponse {
        <HistoryResponse as ::protobuf::Message>::default_instance()
    }
}

impl HistoryResponse {
    pub fn new() -> HistoryResponse {
        ::std::default::Default::default()
    }

    // repeated .pb.WakuMessage messages = 2;


    pub fn get_messages(&self) -> &[super::waku_message_pb::WakuMessage] {
        &self.messages
    }
    pub fn clear_messages(&mut self) {
        self.messages.clear();
    }

    // Param is passed by value, moved
    pub fn set_messages(&mut self, v: ::protobuf::RepeatedField<super::waku_message_pb::WakuMessage>) {
        self.messages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_messages(&mut self) -> &mut ::protobuf::RepeatedField<super::waku_message_pb::WakuMessage> {
        &mut self.messages
    }

    // Take field
    pub fn take_messages(&mut self) -> ::protobuf::RepeatedField<super::waku_message_pb::WakuMessage> {
        ::std::mem::replace(&mut self.messages, ::protobuf::RepeatedField::new())
    }

    // .pb.PagingInfo paging_info = 3;


    pub fn get_paging_info(&self) -> &PagingInfo {
        self.paging_info.as_ref().unwrap_or_else(|| <PagingInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_paging_info(&mut self) {
        self.paging_info.clear();
    }

    pub fn has_paging_info(&self) -> bool {
        self.paging_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_paging_info(&mut self, v: PagingInfo) {
        self.paging_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_paging_info(&mut self) -> &mut PagingInfo {
        if self.paging_info.is_none() {
            self.paging_info.set_default();
        }
        self.paging_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_paging_info(&mut self) -> PagingInfo {
        self.paging_info.take().unwrap_or_else(|| PagingInfo::new())
    }

    // .pb.HistoryResponse.Error error = 4;


    pub fn get_error(&self) -> HistoryResponse_Error {
        self.error
    }
    pub fn clear_error(&mut self) {
        self.error = HistoryResponse_Error::NONE;
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: HistoryResponse_Error) {
        self.error = v;
    }
}

impl ::protobuf::Message for HistoryResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.messages {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.paging_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.messages)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.paging_info)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.error, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.messages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.paging_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.error != HistoryResponse_Error::NONE {
            my_size += ::protobuf::rt::enum_size(4, self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.messages {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.paging_info.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.error != HistoryResponse_Error::NONE {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.error))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HistoryResponse {
        HistoryResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::waku_message_pb::WakuMessage>>(
                "messages",
                |m: &HistoryResponse| { &m.messages },
                |m: &mut HistoryResponse| { &mut m.messages },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PagingInfo>>(
                "paging_info",
                |m: &HistoryResponse| { &m.paging_info },
                |m: &mut HistoryResponse| { &mut m.paging_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<HistoryResponse_Error>>(
                "error",
                |m: &HistoryResponse| { &m.error },
                |m: &mut HistoryResponse| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HistoryResponse>(
                "HistoryResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HistoryResponse {
        static instance: ::protobuf::rt::LazyV2<HistoryResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HistoryResponse::new)
    }
}

impl ::protobuf::Clear for HistoryResponse {
    fn clear(&mut self) {
        self.messages.clear();
        self.paging_info.clear();
        self.error = HistoryResponse_Error::NONE;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HistoryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HistoryResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum HistoryResponse_Error {
    NONE = 0,
    INVALID_CURSOR = 1,
}

impl ::protobuf::ProtobufEnum for HistoryResponse_Error {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<HistoryResponse_Error> {
        match value {
            0 => ::std::option::Option::Some(HistoryResponse_Error::NONE),
            1 => ::std::option::Option::Some(HistoryResponse_Error::INVALID_CURSOR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [HistoryResponse_Error] = &[
            HistoryResponse_Error::NONE,
            HistoryResponse_Error::INVALID_CURSOR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<HistoryResponse_Error>("HistoryResponse.Error", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for HistoryResponse_Error {
}

impl ::std::default::Default for HistoryResponse_Error {
    fn default() -> Self {
        HistoryResponse_Error::NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for HistoryResponse_Error {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HistoryRPC {
    // message fields
    pub request_id: ::std::string::String,
    pub query: ::protobuf::SingularPtrField<HistoryQuery>,
    pub response: ::protobuf::SingularPtrField<HistoryResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HistoryRPC {
    fn default() -> &'a HistoryRPC {
        <HistoryRPC as ::protobuf::Message>::default_instance()
    }
}

impl HistoryRPC {
    pub fn new() -> HistoryRPC {
        ::std::default::Default::default()
    }

    // string request_id = 1;


    pub fn get_request_id(&self) -> &str {
        &self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: ::std::string::String) {
        self.request_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_id(&mut self) -> &mut ::std::string::String {
        &mut self.request_id
    }

    // Take field
    pub fn take_request_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.request_id, ::std::string::String::new())
    }

    // .pb.HistoryQuery query = 2;


    pub fn get_query(&self) -> &HistoryQuery {
        self.query.as_ref().unwrap_or_else(|| <HistoryQuery as ::protobuf::Message>::default_instance())
    }
    pub fn clear_query(&mut self) {
        self.query.clear();
    }

    pub fn has_query(&self) -> bool {
        self.query.is_some()
    }

    // Param is passed by value, moved
    pub fn set_query(&mut self, v: HistoryQuery) {
        self.query = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query(&mut self) -> &mut HistoryQuery {
        if self.query.is_none() {
            self.query.set_default();
        }
        self.query.as_mut().unwrap()
    }

    // Take field
    pub fn take_query(&mut self) -> HistoryQuery {
        self.query.take().unwrap_or_else(|| HistoryQuery::new())
    }

    // .pb.HistoryResponse response = 3;


    pub fn get_response(&self) -> &HistoryResponse {
        self.response.as_ref().unwrap_or_else(|| <HistoryResponse as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: HistoryResponse) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut HistoryResponse {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> HistoryResponse {
        self.response.take().unwrap_or_else(|| HistoryResponse::new())
    }
}

impl ::protobuf::Message for HistoryRPC {
    fn is_initialized(&self) -> bool {
        for v in &self.query {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.request_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.query)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.request_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.request_id);
        }
        if let Some(ref v) = self.query.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.request_id.is_empty() {
            os.write_string(1, &self.request_id)?;
        }
        if let Some(ref v) = self.query.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HistoryRPC {
        HistoryRPC::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "request_id",
                |m: &HistoryRPC| { &m.request_id },
                |m: &mut HistoryRPC| { &mut m.request_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HistoryQuery>>(
                "query",
                |m: &HistoryRPC| { &m.query },
                |m: &mut HistoryRPC| { &mut m.query },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HistoryResponse>>(
                "response",
                |m: &HistoryRPC| { &m.response },
                |m: &mut HistoryRPC| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HistoryRPC>(
                "HistoryRPC",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HistoryRPC {
        static instance: ::protobuf::rt::LazyV2<HistoryRPC> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HistoryRPC::new)
    }
}

impl ::protobuf::Clear for HistoryRPC {
    fn clear(&mut self) {
        self.request_id.clear();
        self.query.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HistoryRPC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HistoryRPC {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13waku_store.pb.proto\x12\x02pb\x1a\x15waku_message.pb.proto\"\x88\
    \x01\n\x05Index\x12\x16\n\x06digest\x18\x01\x20\x01(\x0cR\x06digest\x12#\
    \n\rreceiver_time\x18\x02\x20\x01(\x12R\x0creceiverTime\x12\x1f\n\x0bsen\
    der_time\x18\x03\x20\x01(\x12R\nsenderTime\x12!\n\x0cpubsub_topic\x18\
    \x04\x20\x01(\tR\x0bpubsubTopic\"\xac\x01\n\nPagingInfo\x12\x1b\n\tpage_\
    size\x18\x01\x20\x01(\x04R\x08pageSize\x12!\n\x06cursor\x18\x02\x20\x01(\
    \x0b2\t.pb.IndexR\x06cursor\x126\n\tdirection\x18\x03\x20\x01(\x0e2\x18.\
    pb.PagingInfo.DirectionR\tdirection\"&\n\tDirection\x12\x0c\n\x08BACKWAR\
    D\x10\0\x12\x0b\n\x07FORWARD\x10\x01\"3\n\rContentFilter\x12\"\n\x0ccont\
    entTopic\x18\x01\x20\x01(\tR\x0ccontentTopic\"\xd8\x01\n\x0cHistoryQuery\
    \x12!\n\x0cpubsub_topic\x18\x02\x20\x01(\tR\x0bpubsubTopic\x12:\n\x0fcon\
    tent_filters\x18\x03\x20\x03(\x0b2\x11.pb.ContentFilterR\x0econtentFilte\
    rs\x12/\n\x0bpaging_info\x18\x04\x20\x01(\x0b2\x0e.pb.PagingInfoR\npagin\
    gInfo\x12\x1d\n\nstart_time\x18\x05\x20\x01(\x12R\tstartTime\x12\x19\n\
    \x08end_time\x18\x06\x20\x01(\x12R\x07endTime\"\xc7\x01\n\x0fHistoryResp\
    onse\x12+\n\x08messages\x18\x02\x20\x03(\x0b2\x0f.pb.WakuMessageR\x08mes\
    sages\x12/\n\x0bpaging_info\x18\x03\x20\x01(\x0b2\x0e.pb.PagingInfoR\npa\
    gingInfo\x12/\n\x05error\x18\x04\x20\x01(\x0e2\x19.pb.HistoryResponse.Er\
    rorR\x05error\"%\n\x05Error\x12\x08\n\x04NONE\x10\0\x12\x12\n\x0eINVALID\
    _CURSOR\x10\x01\"\x84\x01\n\nHistoryRPC\x12\x1d\n\nrequest_id\x18\x01\
    \x20\x01(\tR\trequestId\x12&\n\x05query\x18\x02\x20\x01(\x0b2\x10.pb.His\
    toryQueryR\x05query\x12/\n\x08response\x18\x03\x20\x01(\x0b2\x13.pb.Hist\
    oryResponseR\x08responseb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
